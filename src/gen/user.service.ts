// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: user.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "userProtoService";

export interface mockFriendListReq {
  userId: string;
}

export interface mockFriendListRes {
  friends: GetUserResponse[];
  total: number;
  metadata: Metadata | undefined;
}

export interface sendFriendRequestReq {
  userId: string;
  friendId: string;
}

export interface sendFriendRequestRes {
  id: string;
  metadata: Metadata | undefined;
}

export interface isOnFriendListReq {
  userId: string;
  friendId: string;
}

export interface isOnFriendListRes {
  confirm: boolean;
  metadata: Metadata | undefined;
}

export interface Metadata {
  message: string;
  code: string;
  errMessage: string;
}

export interface getListFriendRequestReq {
  userId: string;
  limit: number;
  page: number;
}

export interface getListFriendRequestRes {
  friendRequests: GetUserResponse[];
  total: number;
  metadata: Metadata | undefined;
}

export interface updateStatusFriendRequestReq {
  userId: string;
  friendRequestId: string;
  /** accept or reject */
  status: string;
}

export interface rejectFriendRequestReq {
  userId: string;
  friendRequestId: string;
}

export interface GetAllRelatedFriendRequest {
  userId: string;
}

export interface GetAllRelatedFriendResponse {
  friends: GetUserResponse[];
  metadata: ManageUserResponse | undefined;
}

export interface DeleteAddressRequest {
  id: string;
  userId: string;
}

export interface GetAddressRequest {
  id: string;
  userId: string;
}

export interface GetDefaultAddressRequest {
  userId: string;
}

export interface GetDefaultAddressResponse {
  address: Address | undefined;
  metadata: ManageUserResponse | undefined;
}

export interface GetAddressResponse {
  address: Address | undefined;
  metadata: ManageUserResponse | undefined;
}

export interface GetAddressesRequest {
  userId: string;
  limit: number;
  page: number;
}

export interface Address {
  id: string;
  isDefault: boolean;
  userId: string;
  title: string;
  address: string;
  type: string;
}

export interface GetAddressesResponse {
  addresses: Address[];
  total: number;
  metadata: ManageUserResponse | undefined;
}

export interface CreateAddressRequest {
  userId: string;
  title: string;
  address: string;
  type: string;
  isDefault: boolean;
}

export interface ManageAddressResponse {
  id: string;
  metadata: ManageUserResponse | undefined;
}

export interface UpdateAddressRequest {
  id: string;
  userId: string;
  title: string;
  address: string;
  type: string;
  isDefault: boolean;
}

export interface GetUserByUserNameRequest {
  username: string;
  password: string;
}

export interface IsTakenEmailRequest {
  email: string;
}

export interface IsTakenEmailResponse {
  isTaken: boolean;
}

export interface IsTakenPhoneNumberRequest {
  phoneNumber: string;
}

export interface IsTakenPhoneNumberResponse {
  isTaken: boolean;
}

export interface GetUserRequest {
  id: string;
}

export interface UserAbout {
  workRole: string;
  company: string;
  country: string;
  totalFollowers: number;
  totalFollowing: number;
  quote: string;
  facebook: string;
  twitter: string;
  linkedin: string;
  instagram: string;
  school: string;
}

export interface GetUserResponse {
  id: string;
  name: string;
  avatar: string;
  phoneNumber: string;
  address: string;
  location: string;
  about: UserAbout | undefined;
  isPublic: boolean;
  email: string;
  gender: string;
  phoneVerifiedAt: string;
  emailVerifiedAt: string;
  status: string;
  role: string;
}

export interface UpdateUserRequest {
  id: string;
  name: string;
  avatar: string;
  phoneNumber: string;
  address: string;
  location: string;
  about: UserAbout | undefined;
  isPublic: boolean;
  email: string;
  gender: string;
  phoneVerifiedAt: string;
  emailVerifiedAt: string;
  status: string;
}

export interface ManageUserResponse {
  id: string;
  message: string;
  code: string;
  errMessage: string;
}

export interface CreateUserRequest {
  name: string;
  phoneNumber: string;
  email: string;
  gender: string;
  password: string;
  location: string;
}

export const USER_PROTO_SERVICE_PACKAGE_NAME = "userProtoService";

export interface UserServiceClient {
  getUser(request: GetUserRequest): Observable<GetUserResponse>;

  updateUser(request: UpdateUserRequest): Observable<ManageUserResponse>;

  createUser(request: CreateUserRequest): Observable<ManageUserResponse>;

  isTakenEmail(request: IsTakenEmailRequest): Observable<IsTakenEmailResponse>;

  isTakenPhoneNumber(request: IsTakenPhoneNumberRequest): Observable<IsTakenPhoneNumberResponse>;

  getUserByUserName(request: GetUserByUserNameRequest): Observable<ManageUserResponse>;

  getAllRelatedFriend(request: GetAllRelatedFriendRequest): Observable<GetAllRelatedFriendResponse>;

  /** address */

  getAddresses(request: GetAddressesRequest): Observable<GetAddressesResponse>;

  createAddress(request: CreateAddressRequest): Observable<ManageAddressResponse>;

  updateAddress(request: UpdateAddressRequest): Observable<ManageAddressResponse>;

  deleteAddress(request: DeleteAddressRequest): Observable<ManageAddressResponse>;

  getAddress(request: GetAddressRequest): Observable<GetAddressResponse>;

  getDefaultAddress(request: GetDefaultAddressRequest): Observable<GetDefaultAddressResponse>;

  /** friend request */

  getListFriendRequest(request: getListFriendRequestReq): Observable<getListFriendRequestRes>;

  updateStatusFriendRequest(request: updateStatusFriendRequestReq): Observable<ManageUserResponse>;

  isOnFriendList(request: isOnFriendListReq): Observable<isOnFriendListRes>;

  sendFriendRequest(request: sendFriendRequestReq): Observable<sendFriendRequestRes>;

  /** test */

  mockFriendList(request: mockFriendListReq): Observable<mockFriendListRes>;
}

export interface UserServiceController {
  getUser(request: GetUserRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<ManageUserResponse> | Observable<ManageUserResponse> | ManageUserResponse;

  createUser(
    request: CreateUserRequest,
  ): Promise<ManageUserResponse> | Observable<ManageUserResponse> | ManageUserResponse;

  isTakenEmail(
    request: IsTakenEmailRequest,
  ): Promise<IsTakenEmailResponse> | Observable<IsTakenEmailResponse> | IsTakenEmailResponse;

  isTakenPhoneNumber(
    request: IsTakenPhoneNumberRequest,
  ): Promise<IsTakenPhoneNumberResponse> | Observable<IsTakenPhoneNumberResponse> | IsTakenPhoneNumberResponse;

  getUserByUserName(
    request: GetUserByUserNameRequest,
  ): Promise<ManageUserResponse> | Observable<ManageUserResponse> | ManageUserResponse;

  getAllRelatedFriend(
    request: GetAllRelatedFriendRequest,
  ): Promise<GetAllRelatedFriendResponse> | Observable<GetAllRelatedFriendResponse> | GetAllRelatedFriendResponse;

  /** address */

  getAddresses(
    request: GetAddressesRequest,
  ): Promise<GetAddressesResponse> | Observable<GetAddressesResponse> | GetAddressesResponse;

  createAddress(
    request: CreateAddressRequest,
  ): Promise<ManageAddressResponse> | Observable<ManageAddressResponse> | ManageAddressResponse;

  updateAddress(
    request: UpdateAddressRequest,
  ): Promise<ManageAddressResponse> | Observable<ManageAddressResponse> | ManageAddressResponse;

  deleteAddress(
    request: DeleteAddressRequest,
  ): Promise<ManageAddressResponse> | Observable<ManageAddressResponse> | ManageAddressResponse;

  getAddress(
    request: GetAddressRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  getDefaultAddress(
    request: GetDefaultAddressRequest,
  ): Promise<GetDefaultAddressResponse> | Observable<GetDefaultAddressResponse> | GetDefaultAddressResponse;

  /** friend request */

  getListFriendRequest(
    request: getListFriendRequestReq,
  ): Promise<getListFriendRequestRes> | Observable<getListFriendRequestRes> | getListFriendRequestRes;

  updateStatusFriendRequest(
    request: updateStatusFriendRequestReq,
  ): Promise<ManageUserResponse> | Observable<ManageUserResponse> | ManageUserResponse;

  isOnFriendList(
    request: isOnFriendListReq,
  ): Promise<isOnFriendListRes> | Observable<isOnFriendListRes> | isOnFriendListRes;

  sendFriendRequest(
    request: sendFriendRequestReq,
  ): Promise<sendFriendRequestRes> | Observable<sendFriendRequestRes> | sendFriendRequestRes;

  /** test */

  mockFriendList(
    request: mockFriendListReq,
  ): Promise<mockFriendListRes> | Observable<mockFriendListRes> | mockFriendListRes;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getUser",
      "updateUser",
      "createUser",
      "isTakenEmail",
      "isTakenPhoneNumber",
      "getUserByUserName",
      "getAllRelatedFriend",
      "getAddresses",
      "createAddress",
      "updateAddress",
      "deleteAddress",
      "getAddress",
      "getDefaultAddress",
      "getListFriendRequest",
      "updateStatusFriendRequest",
      "isOnFriendList",
      "sendFriendRequest",
      "mockFriendList",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
